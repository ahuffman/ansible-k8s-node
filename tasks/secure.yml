---

#install required packages
- name: Ensure required kubernetes node packages are installed
  yum: name='{{ item }}' state=latest
  with_items: '{{ k8s_node_packages }}'

#Get current docker version for compatibility with flanneld systemd unit
- name: Get currently installed docker version
  command: "{{ repoquery_cmd }} --installed --qf '%{version}' docker"
  register: docker_curr_ver
  changed_when: false

#configure docker
- name: Configure docker
  template: src=secure/sysconfig/docker.j2 dest=/etc/sysconfig/docker
  notify: Restart flanneld

#override docker service with flanneld drop-in
- name: Create docker flanneld drop-in
  file: path=/etc/systemd/system/docker.service.d state=directory owner=root group=root mode=0644

- name: Configure docker with flanneld overlay network
  template: src=secure/systemd/flanneld.conf.j2 dest=/etc/systemd/system/docker.service.d/flanneld.conf
  notify: 
    - Reload systemctl daemon
    - Restart flanneld
    - Restart kube-proxy
    - Restart kubelet

#configure flannel
- name: Configure flanneld
  template: src=secure/sysconfig/flanneld.j2 dest=/etc/sysconfig/flanneld
  notify:
    - Restart flanneld
    - Restart kube-proxy

#Verify Node Certificates Exist
- name: Check for presence of kubelet certificate path
  stat: path="{{ k8s_node_cert_path }}"
  register: node_cert_path

- name: Check for presence of kubernetes master CA key
  stat: path="{{ k8s_node_cert_path }}/{{ k8s_apiserver_ca_key_filename }}"
  register: apiserver_ca_key

- name: Check for presence of kubernetes master CA certificate
  stat: path="{{ k8s_node_cert_path }}/{{ k8s_apiserver_ca_cert_filename }}"
  register: apiserver_ca_cert

- name: Check for presence of kubelet server key
  stat: path="{{ k8s_node_cert_path }}/{{ k8s_node_server_key_filename }}"
  register: node_server_key

- name: Check for presence of kubelet server csr
  stat: path="{{ k8s_node_cert_path }}/{{ k8s_node_server_csr_filename }}"
  register: node_server_csr

- name: Check for presence of kubelet server certificate
  stat: path="{{ k8s_node_cert_path }}/{{ k8s_node_server_cert_filename }}"
  register: node_server_cert

#Create node certificate path
- name: Create kubelet certificate path
  file: path="{{ k8s_node_cert_path }}" state=directory mode=744 group=root owner=kube
  when: "node_cert_path.stat.exists != True"

#Retrieve the CA key and certificate for generating node certificates
- name: Retrieve kubernetes master CA key
  copy: src="/etc/ansible/files/k8s-master-certs/{{ k8s_master_hostname }}/{{ k8s_apiserver_ca_key_filename }}" dest="{{ k8s_node_cert_path }}/{{ k8s_apiserver_ca_key_filename }}"
  when: (apiserver_ca_key.stat.exists != True and node_server_cert.stat.exists != True)

- name: Retrieve kubernetes master CA certificate
  copy: src="/etc/ansible/files/k8s-master-certs/{{ k8s_master_hostname }}/{{ k8s_apiserver_ca_cert_filename }}" dest="{{ k8s_node_cert_path }}/{{ k8s_apiserver_ca_cert_filename }}"
  when: (apiserver_ca_cert.stat.exists != True and node_server_cert.stat.exists != True)

#Create openssl config
- name: Create Custom OpenSSL Config for kubernetes node certificates
  template: src=secure/openssl/openssl.conf.j2 dest="{{ k8s_node_cert_path }}/openssl.conf"

#Generate node certificates
- name: Generate kubelet server key
  shell: openssl genrsa -out "{{ k8s_node_cert_path }}/{{k8s_node_server_key_filename }}" 2048
  when: "node_server_key.stat.exists != True"

- name: Generate kubelet server CSR
  shell: openssl req -new -key "{{ k8s_node_cert_path }}/{{ k8s_node_server_key_filename }}" -subj "/CN='{{ ansible_hostname }}'" -out "{{ k8s_node_cert_path }}/{{ k8s_node_server_csr_filename }}"
  when: "node_server_csr.stat.exists != True"

- name: Generate kubelet server certificate
  shell: openssl x509 -req -in "{{ k8s_node_cert_path }}/{{ k8s_node_server_csr_filename }}" -CA "{{ k8s_node_cert_path }}/{{ k8s_apiserver_ca_cert_filename }}" -CAkey "{{ k8s_node_cert_path }}/{{ k8s_apiserver_ca_key_filename }}" -CAcreateserial -out "{{ k8s_node_cert_path }}/{{ k8s_node_server_cert_filename }}" -days 10000 -extensions v3_req -extfile "{{ k8s_node_cert_path }}/openssl.conf"
  when: "node_server_cert.stat.exists != True"
  notify:
    - Cleanup CA Files

- name: Ensure proper permissions on kubernetes node certificates
  file: dest="{{ k8s_node_cert_path }}/{{ item }}" mode=440 group=root owner=kube state=file
  with_items:
    - '{{ k8s_node_server_key_filename }}'
    - '{{ k8s_node_server_csr_filename }}'
    - '{{ k8s_node_server_cert_filename }}'
  notify: 
    - Restart flanneld
    - Restart kube-proxy
    - Restart kubelet
#End certificate generation

#***Create kubeconfigs for secured connections
#kubelet
- name: Configure kubelet with secure kubeconfig
  template: src=secure/kubernetes/kubelet.kubeconfig.j2 dest=/etc/kubernetes/{{ k8s_kubelet_kubeconfig_filename }}
  when: (k8s_mst_is_node == True) or 
        (k8s_mst_is_node is undefined) #compat with k8s-master role
  notify:
    - Restart kubelet

#proxy
- name: Configure kube-proxy with secure kubeconfig
  template: src=secure/kubernetes/proxy.kubeconfig.j2 dest=/etc/kubernetes/{{ k8s_proxy_kubeconfig_filename }}
  when: (k8s_mst_is_node == True) or
        (k8s_mst_is_node is undefined) #compat with k8s-master role
  notify:
    - Restart flanneld
    - Restart kube-proxy
#End kubeconfigs

#configure kubernetes
- name: Configure kubernetes general settings
  template: src=secure/kubernetes/config.j2 dest=/etc/kubernetes/config
  notify: 
    - Restart kubelet
    - Restart kube-proxy
  when: (k8s_mst_is_node != True) or
        (k8s_mst_is_node is undefined) #compat with k8s-master role

- name: Configure kubernetes node settings
  template: src=secure/kubernetes/kubelet.j2 dest=/etc/kubernetes/kubelet
  notify: Restart kubelet

- name: Configure kube-proxy settings
  template: src=secure/kubernetes/proxy.j2 dest=/etc/kubernetes/proxy
  notify: Restart kube-proxy

#configure services
- name: Disable docker service (flanneld launches)
  service: name=docker enabled=no

- name: Enable flanneld service
  service: name=flanneld enabled=yes
  notify: Restart flanneld

- name: Enable kubelet service
  service: name=kubelet enabled=yes
  notify: Restart kubelet

- name: Enable kube-proxy service
  service: name=kube-proxy enabled=yes
  notify: Restart kube-proxy
